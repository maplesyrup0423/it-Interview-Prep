[
  {
    "id": 1,
    "category": "백엔드",
    "question": "RESTful API란 무엇인가요?",
    "answer": "RESTful API는 HTTP 프로토콜을 기반으로 자원을 CRUD 방식으로 관리할 수 있게 설계된 API를 의미합니다."
  },
  {
    "id": 2,
    "category": "백엔드",
    "question": "JWT (JSON Web Token)는 무엇인가요?",
    "answer": "JWT는 인증 정보를 안전하게 전송하기 위한 토큰 기반의 인증 방식입니다. 주로 사용자 인증에 사용됩니다."
  },
  {
    "id": 3,
    "category": "백엔드",
    "question": "OAuth2 인증 프로토콜의 개념은 무엇인가요?",
    "answer": "OAuth2는 리소스 소유자의 비밀번호를 서버에 노출하지 않고, 제3자 애플리케이션에 권한을 부여하는 인증 프로토콜입니다."
  },
  {
    "id": 4,
    "category": "백엔드",
    "question": "CRUD란 무엇인가요?",
    "answer": "CRUD는 데이터베이스의 기본적인 연산으로 Create(생성), Read(읽기), Update(수정), Delete(삭제)를 의미합니다."
  },
  {
    "id": 5,
    "category": "백엔드",
    "question": "SQL과 NoSQL의 차이점은 무엇인가요?",
    "answer": "SQL은 관계형 데이터베이스로 데이터를 테이블 형태로 관리하며, NoSQL은 비관계형 데이터베이스로 JSON 또는 키-값 형태로 데이터를 저장합니다."
  },
  {
    "id": 6,
    "category": "백엔드",
    "question": "동기와 비동기의 차이점은 무엇인가요?",
    "answer": "동기 방식은 작업이 완료될 때까지 기다리는 방식이며, 비동기 방식은 작업을 요청하고 기다리지 않고 다른 작업을 수행하는 방식입니다."
  },
  {
    "id": 7,
    "category": "백엔드",
    "question": "데이터베이스 정규화란 무엇인가요?",
    "answer": "정규화는 데이터베이스의 중복을 줄이고, 데이터의 무결성을 유지하기 위한 과정입니다."
  },
  {
    "id": 8,
    "category": "백엔드",
    "question": "ACID란 무엇인가요?",
    "answer": "ACID는 데이터베이스 트랜잭션의 특성으로, Atomicity(원자성), Consistency(일관성), Isolation(격리성), Durability(지속성)을 의미합니다."
  },
  {
    "id": 9,
    "category": "백엔드",
    "question": "MongoDB의 주요 특징은 무엇인가요?",
    "answer": "MongoDB는 NoSQL 데이터베이스로, 데이터를 JSON-like 형태로 저장하며, 수평 확장이 용이하고 빠른 속도로 데이터를 처리할 수 있습니다."
  },
  {
    "id": 10,
    "category": "백엔드",
    "question": "Nginx와 Apache의 차이점은 무엇인가요?",
    "answer": "Nginx는 비동기식 웹 서버로, 높은 성능과 확장성에 강점이 있으며, Apache는 동기식 웹 서버로 기능이 풍부하지만 성능에서는 Nginx에 비해 낮을 수 있습니다."
  },
  {
    "id": 11,
    "category": "프론트엔드",
    "question": "React의 주요 개념은 무엇인가요?",
    "answer": "React는 컴포넌트 기반 구조와 상태 관리로 UI를 효율적으로 렌더링하는 JavaScript 라이브러리입니다."
  },
  {
    "id": 12,
    "category": "프론트엔드",
    "question": "컴포넌트 라이프사이클이란 무엇인가요?",
    "answer": "React 컴포넌트 라이프사이클은 컴포넌트가 생성되고, 업데이트되고, 제거되는 과정을 관리하는 메커니즘을 말합니다."
  },
  {
    "id": 13,
    "category": "프론트엔드",
    "question": "Virtual DOM이란 무엇인가요?",
    "answer": "Virtual DOM은 실제 DOM을 업데이트하기 전에 메모리 상에서 미리 렌더링된 DOM 객체로, 실제 DOM을 업데이트하는 비용을 최소화하는 방식입니다."
  },
  {
    "id": 14,
    "category": "프론트엔드",
    "question": "Webpack이란 무엇인가요?",
    "answer": "Webpack은 JavaScript 애플리케이션의 모듈 번들러로, 다양한 리소스 파일들을 하나의 파일로 묶어주는 역할을 합니다."
  },
  {
    "id": 15,
    "category": "프론트엔드",
    "question": "CSS Flexbox와 Grid의 차이점은 무엇인가요?",
    "answer": "Flexbox는 1차원 레이아웃을 처리하는데 유용하고, Grid는 2차원 레이아웃을 처리하는데 적합합니다."
  },
  {
    "id": 16,
    "category": "프론트엔드",
    "question": "JavaScript의 이벤트 위임이란 무엇인가요?",
    "answer": "이벤트 위임은 부모 요소에 이벤트 리스너를 추가하여 자식 요소에서 발생하는 이벤트를 처리하는 기법입니다."
  },
  {
    "id": 17,
    "category": "프론트엔드",
    "question": "CORS란 무엇인가요?",
    "answer": "CORS는 Cross-Origin Resource Sharing의 약자로, 다른 도메인에서 리소스를 요청할 때 발생할 수 있는 보안 문제를 해결하는 기술입니다."
  },
  {
    "id": 18,
    "category": "프론트엔드",
    "question": "Single Page Application(SPA)란 무엇인가요?",
    "answer": "SPA는 페이지를 새로 고침하지 않고, 하나의 HTML 페이지에서 동적으로 콘텐츠를 변경하는 웹 애플리케이션입니다."
  },
  {
    "id": 19,
    "category": "프론트엔드",
    "question": "JSON과 XML의 차이점은 무엇인가요?",
    "answer": "JSON은 경량의 데이터 교환 형식으로 사람이 읽고 쓰기 쉬운 형태이고, XML은 더 복잡하며 구조가 엄격한 마크업 언어입니다."
  },
  {
    "id": 20,
    "category": "프론트엔드",
    "question": "TypeScript의 장점은 무엇인가요?",
    "answer": "TypeScript는 JavaScript에 타입 시스템을 추가한 언어로, 코드의 안정성을 높이고, IDE에서의 자동 완성과 에러 체크를 강화할 수 있습니다."
  }
]
